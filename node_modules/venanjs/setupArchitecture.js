
/*!
 * venan
 * Copyright(c) 2024 Ivanno VenÃ¢ncio
 * MIT Licensed
 */
import fs from 'fs';
import path from 'path';
import { createInterface } from 'readline';

const architectures = [
  'mvc',
  'restapi',
  'event-driven',
  'clean-architecture'
];

const rl = createInterface({
  input: process.stdin,
  output: process.stdout
});

function askQuestion(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function setupArchitecture() {
  console.log('Choose an architecture:');
  architectures.forEach((arch, index) => {
    console.log(`${index + 1}. ${arch}`);
  });

  const choice = await askQuestion('Enter the desired architecture number: ');
  const selectedArch = architectures[parseInt(choice) - 1];

  if (!selectedArch) {
    console.log('Invalid choice.');
    rl.close();
    process.exit(1);
  }

  console.log(`Configuring the project with architecture ${selectedArch}...`);
  await copyTemplateFiles(selectedArch);
  rl.close();
}

function copyDirectory(src, dest) {
  if (!fs.existsSync(dest)) {
    fs.mkdirSync(dest);
  }

  const entries = fs.readdirSync(src, { withFileTypes: true });

  entries.forEach(entry => {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);

    if (entry.isDirectory()) {
      copyDirectory(srcPath, destPath);
    } else {
      try {
        if (fs.existsSync(destPath)) {
          console.log(`The file ${destPath} already exists. Overwriting...`);
        }
        fs.copyFileSync(srcPath, destPath);
        console.log(`File created: ${srcPath} -> ${destPath}`);
      } catch (err) {
        console.error(`Error creating file ${srcPath} to ${destPath}:`, err);
      }
    }
  });
}

async function copyTemplateFiles(architecture) {
  const templateDir = path.join(process.cwd(), 'node_modules', 'venanjs', 'architectures', architecture);
  const destinationDir = process.cwd();

  try {
    if (fs.existsSync(templateDir)) {
      copyDirectory(templateDir, destinationDir);
      console.log('Architecture structure successfully configured, you can modify it as per your choice');
    } else {
      console.error(`The architecture ${architecture} was not found in ${templateDir}`);
    }
  } catch (err) {
    console.error(`Error creating files for ${destinationDir}:`, err);
  }
}

setupArchitecture();
